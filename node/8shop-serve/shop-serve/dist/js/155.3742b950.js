"use strict"; (self["webpackChunkshop"] = self["webpackChunkshop"] || []).push([[155], { 5155: function (e, r, t) { t.r(r), t.d(r, { default: function () { return g } }); var o = function () { var e = this, r = e._self._c; return r("div", { staticClass: "login" }, [r("el-form", { ref: "userForm", attrs: { "label-position": e.labelPosition, "label-width": e.labelWidth, model: e.loginFrom } }, [r("el-form-item", { attrs: { rules: e.usernameRules, prop: "username", label: "用户名" } }, [r("el-input", { model: { value: e.loginFrom.username, callback: function (r) { e.$set(e.loginFrom, "username", r) }, expression: "loginFrom.username" } })], 1), r("el-form-item", { attrs: { rules: e.passwordRules, prop: "password", label: "密码：" } }, [r("el-input", { model: { value: e.loginFrom.password, callback: function (r) { e.$set(e.loginFrom, "password", r) }, expression: "loginFrom.password" } })], 1), r("el-button", { attrs: { size: "medium", type: "primary" }, on: { click: function (r) { return e.onSubmit("userForm") } } }, [e._v("登录")])], 1)], 1) }, s = [], n = (t(1703), t(4471)); function l(e) { return console.log(e), (0, n.Z)({ url: "/api/register", method: "get", params: { ...e } }) } var i = { name: "Register", data() { const e = (e, r, t) => { if (!r) return t(new Error("用户名不能为空")); if (r.length < 4) return t(new Error("用户名不能小于4")); if (r.length > 6) return t(new Error("用户名不能大于6")); let o = /\w{4,6}/; if (!o.test(r)) return t(new Error("请输入4-6位数字字母下划线")); t() }, r = (e, r, t) => { if (!r) return t(new Error("密码不能为空")); if (r.length < 6) return t(new Error("密码不能小于4")); if (r.length > 16) return t(new Error("密码不能大于6")); let o = /\w{6,16}/; if (console.log(o.test(r)), !o.test(r)) return alert(1), t(new Error("请输入4-6位数字字母下划线")); t() }; return { userForm: "userForm", loginFrom: { username: "", password: "" }, labelPosition: "right", labelWidth: "80px", usernameRules: { validator: e, trigger: "blur" }, passwordRules: [{ validator: r, trigger: "blur" }] } }, mounted() { }, methods: { onSubmit(e) { console.log(e), this.$refs[e].validate((e => { console.log(e), this.setRegister() })) }, setRegister() { return l(this.loginFrom).then((e => { 1 == e.code && (this.$message({ message: "注册成功", type: "success" }), this.$router.push("/login")) })) } } }, u = i, a = t(1001), m = (0, a.Z)(u, o, s, !1, null, null, null), g = m.exports } }]);
//# sourceMappingURL=155.3742b950.js.map